"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/profile/page",{

/***/ "(app-pages-browser)/./src/hooks/useUserData.ts":
/*!**********************************!*\
  !*** ./src/hooks/useUserData.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useUserData: () => (/* binding */ useUserData)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _app_firebase_FirebaseProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../app/firebase/FirebaseProvider */ \"(app-pages-browser)/./src/app/firebase/FirebaseProvider.tsx\");\n\n\nconst API_URL = 'https://studylist-server.onrender.com';\nconst isOnline = ()=>{\n    return typeof navigator !== 'undefined' && navigator.onLine;\n};\nconst useUserData = ()=>{\n    const { auth } = (0,_app_firebase_FirebaseProvider__WEBPACK_IMPORTED_MODULE_1__.useFirebase)();\n    const [userData, setUserData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const fetchUserData = async function(currentUser) {\n        let forceRefresh = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        if (isLoading) return;\n        try {\n            setLoading(true);\n            const startTime = performance.now();\n            // 如果不是強制刷新，才檢查快取\n            if (!forceRefresh && !isOnline()) {\n                console.log('Offline - using cached data if available');\n                const cacheKey = \"userData_\".concat(currentUser.uid);\n                const cachedData = sessionStorage.getItem(cacheKey);\n                if (cachedData) {\n                    const { data, timestamp } = JSON.parse(cachedData);\n                    const age = Math.round((Date.now() - timestamp) / 1000);\n                    console.log(\"Using cached data, age: \".concat(age, \" seconds\"));\n                    setUserData(data);\n                    return;\n                }\n                throw new Error('No cached data available and device is offline');\n            }\n            const token = await currentUser.getIdToken();\n            const response = await fetch(\"\".concat(API_URL, \"/api/users/\").concat(currentUser.uid), {\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            const cacheKey = \"userData_\".concat(currentUser.uid);\n            sessionStorage.setItem(cacheKey, JSON.stringify({\n                data,\n                timestamp: Date.now()\n            }));\n            setUserData(data);\n        } catch (error) {\n            console.error('Error fetching user data:', error);\n            setUserData(null);\n        } finally{\n            setLoading(false);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useUserData.useEffect\": ()=>{\n            let isMounted = true;\n            const unsubscribe = auth.onAuthStateChanged({\n                \"useUserData.useEffect.unsubscribe\": (user)=>{\n                    if (user && isMounted) {\n                        fetchUserData(user);\n                    } else {\n                        setUserData(null);\n                        setLoading(false);\n                    }\n                }\n            }[\"useUserData.useEffect.unsubscribe\"]);\n            return ({\n                \"useUserData.useEffect\": ()=>{\n                    isMounted = false;\n                    unsubscribe();\n                }\n            })[\"useUserData.useEffect\"];\n        }\n    }[\"useUserData.useEffect\"], [\n        auth\n    ]);\n    const addMaterial = async (materialData, topicId)=>{\n        try {\n            const user = auth.currentUser;\n            if (!user) throw new Error('No user logged in');\n            const endpoint = \"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics/\").concat(topicId, \"/materials\");\n            console.log('Adding material:', {\n                payload: materialData,\n                topicId,\n                url: endpoint\n            });\n            const token = await user.getIdToken();\n            const response = await fetch(endpoint, {\n                method: 'POST',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(materialData)\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('Server error response:', errorText);\n                throw new Error(\"Failed to add material: \".concat(response.status));\n            }\n            const updatedUser = await response.json();\n            setUserData(updatedUser);\n            return true;\n        } catch (error) {\n            console.error('Error adding material:', error);\n            return false;\n        }\n    };\n    const updateProfile = async (data)=>{\n        try {\n            const user = auth.currentUser;\n            if (!user) throw new Error('No user logged in');\n            const token = await user.getIdToken();\n            console.log('Updating profile with data:', data);\n            console.log('Sending request to:', \"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/profile\"));\n            const response = await fetch(\"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/profile\"), {\n                method: 'PUT',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                console.error('Error response:', errorData);\n                throw new Error(errorData.error || 'Failed to update profile');\n            }\n            const updatedUser = await response.json();\n            console.log('Updated user data:', updatedUser);\n            setUserData(updatedUser);\n            return true;\n        } catch (error) {\n            console.error('Error updating profile:', error);\n            return false;\n        }\n    };\n    const updateTopicName = async (topicId, name)=>{\n        try {\n            const user = auth.currentUser;\n            if (!user) throw new Error('No user logged in');\n            const token = await user.getIdToken();\n            console.log('Updating topic:', {\n                topicId,\n                name,\n                url: \"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics/\").concat(topicId)\n            });\n            const response = await fetch(\"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics/\").concat(topicId), {\n                method: 'PUT',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    name\n                })\n            });\n            if (!response.ok) {\n                const contentType = response.headers.get('content-type');\n                if (contentType && contentType.includes('application/json')) {\n                    const errorData = await response.json();\n                    throw new Error(errorData.error || 'Failed to update topic name');\n                } else {\n                    const text = await response.text();\n                    console.error('Unexpected response:', text);\n                    throw new Error(\"Server error: \".concat(response.status));\n                }\n            }\n            const updatedUser = await response.json();\n            setUserData(updatedUser);\n            return true;\n        } catch (error) {\n            console.error('Error updating topic name:', error);\n            return false;\n        }\n    };\n    const addTopic = async (name)=>{\n        try {\n            const user = auth.currentUser;\n            if (!user) throw new Error('No user logged in');\n            const token = await user.getIdToken();\n            console.log('Sending request to:', \"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics\"));\n            const response = await fetch(\"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics\"), {\n                method: 'POST',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    name\n                })\n            });\n            if (!response.ok) {\n                const contentType = response.headers.get('content-type');\n                if (contentType && contentType.includes('application/json')) {\n                    const errorData = await response.json();\n                    throw new Error(errorData.error || 'Failed to add topic');\n                } else {\n                    const text = await response.text();\n                    console.error('Unexpected response:', text);\n                    throw new Error(\"Server error: \".concat(response.status));\n                }\n            }\n            const updatedUser = await response.json();\n            setUserData(updatedUser);\n            return true;\n        } catch (error) {\n            console.error('Error adding topic:', error);\n            return false;\n        }\n    };\n    const getContributionData = ()=>{\n        if (!(userData === null || userData === void 0 ? void 0 : userData.contributions)) return [];\n        // Sort contributions by date\n        const sortedContributions = [\n            ...userData.contributions\n        ].sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n        return sortedContributions.map((contribution)=>({\n                date: contribution.date,\n                count: contribution.count,\n                studyCount: contribution.studyCount || 0 // 確保有 studyCount\n            }));\n    };\n    const completeMaterial = async (materialId, topicId)=>{\n        try {\n            const user = auth.currentUser;\n            if (!user) throw new Error('No user logged in');\n            const endpoint = \"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics/\").concat(topicId, \"/materials/\").concat(materialId, \"/complete\");\n            console.log('Sending complete request to:', endpoint);\n            const token = await user.getIdToken();\n            const response = await fetch(endpoint, {\n                method: 'PUT',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                console.error('Complete material error response:', errorData);\n                throw new Error(errorData.message || errorData.error || 'Failed to update material completion status');\n            }\n            const updatedUser = await response.json();\n            setUserData(updatedUser);\n        } catch (error) {\n            console.error('Error completing material:', error);\n            throw error;\n        }\n    };\n    const uncompleteMaterial = async (materialId, topicId)=>{\n        try {\n            const user = auth.currentUser;\n            if (!user) throw new Error('No user logged in');\n            const endpoint = \"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics/\").concat(topicId, \"/materials/\").concat(materialId, \"/uncomplete\");\n            const token = await user.getIdToken();\n            const response = await fetch(endpoint, {\n                method: 'PUT',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.message || 'Failed to update material completion status');\n            }\n            const updatedUser = await response.json();\n            setUserData(updatedUser);\n        } catch (error) {\n            console.error('Error uncompleting material:', error);\n            throw error;\n        }\n    };\n    const deleteMaterial = async (materialId, topicId)=>{\n        try {\n            const user = auth.currentUser;\n            if (!user) throw new Error('No user logged in');\n            const endpoint = \"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics/\").concat(topicId, \"/materials/\").concat(materialId);\n            const token = await user.getIdToken();\n            console.log('Delete material request:', {\n                endpoint,\n                materialId,\n                topicId,\n                userUid: user.uid\n            });\n            const response = await fetch(endpoint, {\n                method: 'DELETE',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                console.error('Delete material failed:', errorData);\n                return false;\n            }\n            // 更新本地狀態而不是重新獲取所有數據\n            setUserData((prevData)=>{\n                if (!prevData) return null;\n                const updatedTopics = prevData.topics.map((topic)=>{\n                    if (topic._id !== topicId) return topic;\n                    const updatedCategories = {\n                        ...topic.categories\n                    };\n                    for (const type of [\n                        'webpage',\n                        'video',\n                        'podcast',\n                        'book'\n                    ]){\n                        updatedCategories[type] = updatedCategories[type].filter((m)=>m._id !== materialId);\n                    }\n                    return {\n                        ...topic,\n                        categories: updatedCategories\n                    };\n                });\n                return {\n                    ...prevData,\n                    topics: updatedTopics\n                };\n            });\n            return true;\n        } catch (error) {\n            console.error('Delete material error:', error);\n            return false;\n        }\n    };\n    const deleteTopic = async (topicId)=>{\n        try {\n            const user = auth.currentUser;\n            if (!user) throw new Error('No user logged in');\n            const token = await user.getIdToken();\n            const response = await fetch(\"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics/\").concat(topicId), {\n                method: 'DELETE',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                console.error('Delete topic failed:', errorData);\n                return false;\n            }\n            // Update local state\n            setUserData((prevData)=>{\n                if (!prevData) return null;\n                return {\n                    ...prevData,\n                    topics: prevData.topics.filter((topic)=>topic._id !== topicId)\n                };\n            });\n            return true;\n        } catch (error) {\n            console.error('Delete topic error:', error);\n            return false;\n        }\n    };\n    return {\n        userData,\n        loading,\n        fetchUserData,\n        addMaterial,\n        updateProfile,\n        addTopic,\n        updateTopicName,\n        getContributionData,\n        completeMaterial,\n        uncompleteMaterial,\n        deleteMaterial,\n        deleteTopic\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useUserData.ts\n"));

/***/ })

});