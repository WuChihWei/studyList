"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/profile/page",{

/***/ "(app-pages-browser)/./src/hooks/useUserData.ts":
/*!**********************************!*\
  !*** ./src/hooks/useUserData.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useUserData: () => (/* binding */ useUserData)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _app_firebase_FirebaseProvider__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../app/firebase/FirebaseProvider */ \"(app-pages-browser)/./src/app/firebase/FirebaseProvider.tsx\");\n\n\nconst API_URL = 'https://studylist-server.onrender.com';\nconst useUserData = ()=>{\n    const { auth } = (0,_app_firebase_FirebaseProvider__WEBPACK_IMPORTED_MODULE_1__.useFirebase)();\n    const [userData, setUserData] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n    const [loading, setLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n    const [isLoading, setIsLoading] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(false);\n    const fetchUserData = async function(currentUser) {\n        let forceRefresh = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        if (isLoading) return;\n        try {\n            setLoading(true);\n            const startTime = performance.now();\n            // 如果不是強制刷新，才檢查快取\n            if (!forceRefresh && !isOnline()) {\n                console.log('Offline - using cached data if available');\n                const cacheKey = \"userData_\".concat(currentUser.uid);\n                const cachedData = sessionStorage.getItem(cacheKey);\n                if (cachedData) {\n                    const { data, timestamp } = JSON.parse(cachedData);\n                    const age = Math.round((Date.now() - timestamp) / 1000);\n                    console.log(\"Using cached data, age: \".concat(age, \" seconds\"));\n                    setUserData(data);\n                    return;\n                }\n                throw new Error('No cached data available and device is offline');\n            }\n            const token = await currentUser.getIdToken();\n            const response = await fetch(\"\".concat(API_URL, \"/api/users/\").concat(currentUser.uid), {\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            const cacheKey = \"userData_\".concat(currentUser.uid);\n            sessionStorage.setItem(cacheKey, JSON.stringify({\n                data,\n                timestamp: Date.now()\n            }));\n            setUserData(data);\n        } catch (error) {\n            console.error('Error fetching user data:', error);\n            setUserData(null);\n        } finally{\n            setLoading(false);\n        }\n    };\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useUserData.useEffect\": ()=>{\n            let isMounted = true;\n            const unsubscribe = auth.onAuthStateChanged({\n                \"useUserData.useEffect.unsubscribe\": (user)=>{\n                    if (user && isMounted) {\n                        fetchUserData(user);\n                    } else {\n                        setUserData(null);\n                        setLoading(false);\n                    }\n                }\n            }[\"useUserData.useEffect.unsubscribe\"]);\n            return ({\n                \"useUserData.useEffect\": ()=>{\n                    isMounted = false;\n                    unsubscribe();\n                }\n            })[\"useUserData.useEffect\"];\n        }\n    }[\"useUserData.useEffect\"], [\n        auth\n    ]);\n    const addMaterial = async (materialData, topicId)=>{\n        try {\n            const user = auth.currentUser;\n            if (!user) throw new Error('No user logged in');\n            const endpoint = \"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics/\").concat(topicId, \"/materials\");\n            console.log('Adding material:', {\n                payload: materialData,\n                topicId,\n                url: endpoint\n            });\n            const token = await user.getIdToken();\n            const response = await fetch(endpoint, {\n                method: 'POST',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(materialData)\n            });\n            if (!response.ok) {\n                const errorText = await response.text();\n                console.error('Server error response:', errorText);\n                throw new Error(\"Failed to add material: \".concat(response.status));\n            }\n            const updatedUser = await response.json();\n            setUserData(updatedUser);\n            return true;\n        } catch (error) {\n            console.error('Error adding material:', error);\n            return false;\n        }\n    };\n    const updateProfile = async (data)=>{\n        try {\n            const user = auth.currentUser;\n            if (!user) throw new Error('No user logged in');\n            const token = await user.getIdToken();\n            console.log('Updating profile with data:', data);\n            console.log('Sending request to:', \"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/profile\"));\n            const response = await fetch(\"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/profile\"), {\n                method: 'PUT',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(data)\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                console.error('Error response:', errorData);\n                throw new Error(errorData.error || 'Failed to update profile');\n            }\n            const updatedUser = await response.json();\n            console.log('Updated user data:', updatedUser);\n            setUserData(updatedUser);\n            return true;\n        } catch (error) {\n            console.error('Error updating profile:', error);\n            return false;\n        }\n    };\n    const updateTopicName = async (topicId, name)=>{\n        try {\n            const user = auth.currentUser;\n            if (!user) throw new Error('No user logged in');\n            const token = await user.getIdToken();\n            console.log('Updating topic:', {\n                topicId,\n                name,\n                url: \"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics/\").concat(topicId)\n            });\n            const response = await fetch(\"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics/\").concat(topicId), {\n                method: 'PUT',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    name\n                })\n            });\n            if (!response.ok) {\n                const contentType = response.headers.get('content-type');\n                if (contentType && contentType.includes('application/json')) {\n                    const errorData = await response.json();\n                    throw new Error(errorData.error || 'Failed to update topic name');\n                } else {\n                    const text = await response.text();\n                    console.error('Unexpected response:', text);\n                    throw new Error(\"Server error: \".concat(response.status));\n                }\n            }\n            const updatedUser = await response.json();\n            setUserData(updatedUser);\n            return true;\n        } catch (error) {\n            console.error('Error updating topic name:', error);\n            return false;\n        }\n    };\n    const addTopic = async (name)=>{\n        try {\n            const user = auth.currentUser;\n            if (!user) throw new Error('No user logged in');\n            const token = await user.getIdToken();\n            console.log('Sending request to:', \"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics\"));\n            const response = await fetch(\"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics\"), {\n                method: 'POST',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    name\n                })\n            });\n            if (!response.ok) {\n                const contentType = response.headers.get('content-type');\n                if (contentType && contentType.includes('application/json')) {\n                    const errorData = await response.json();\n                    throw new Error(errorData.error || 'Failed to add topic');\n                } else {\n                    const text = await response.text();\n                    console.error('Unexpected response:', text);\n                    throw new Error(\"Server error: \".concat(response.status));\n                }\n            }\n            const updatedUser = await response.json();\n            setUserData(updatedUser);\n            return true;\n        } catch (error) {\n            console.error('Error adding topic:', error);\n            return false;\n        }\n    };\n    const getContributionData = ()=>{\n        if (!(userData === null || userData === void 0 ? void 0 : userData.contributions)) return [];\n        // Sort contributions by date\n        const sortedContributions = [\n            ...userData.contributions\n        ].sort((a, b)=>new Date(a.date).getTime() - new Date(b.date).getTime());\n        return sortedContributions.map((contribution)=>({\n                date: contribution.date,\n                count: contribution.count,\n                studyCount: contribution.studyCount || 0 // 確保有 studyCount\n            }));\n    };\n    const completeMaterial = async (materialId, topicId)=>{\n        try {\n            const user = auth.currentUser;\n            if (!user) throw new Error('No user logged in');\n            const endpoint = \"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics/\").concat(topicId, \"/materials/\").concat(materialId, \"/complete\");\n            console.log('Sending complete request to:', endpoint);\n            const token = await user.getIdToken();\n            const response = await fetch(endpoint, {\n                method: 'PUT',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                console.error('Complete material error response:', errorData);\n                throw new Error(errorData.message || errorData.error || 'Failed to update material completion status');\n            }\n            const updatedUser = await response.json();\n            setUserData(updatedUser);\n        } catch (error) {\n            console.error('Error completing material:', error);\n            throw error;\n        }\n    };\n    const uncompleteMaterial = async (materialId, topicId)=>{\n        try {\n            const user = auth.currentUser;\n            if (!user) throw new Error('No user logged in');\n            const endpoint = \"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics/\").concat(topicId, \"/materials/\").concat(materialId, \"/uncomplete\");\n            const token = await user.getIdToken();\n            const response = await fetch(endpoint, {\n                method: 'PUT',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.message || 'Failed to update material completion status');\n            }\n            const updatedUser = await response.json();\n            setUserData(updatedUser);\n        } catch (error) {\n            console.error('Error uncompleting material:', error);\n            throw error;\n        }\n    };\n    const deleteMaterial = async (materialId, topicId)=>{\n        try {\n            const user = auth.currentUser;\n            if (!user) throw new Error('No user logged in');\n            const endpoint = \"\".concat(API_URL, \"/api/users/\").concat(user.uid, \"/topics/\").concat(topicId, \"/materials/\").concat(materialId);\n            const token = await user.getIdToken();\n            console.log('Delete material request:', {\n                endpoint,\n                materialId,\n                topicId,\n                userUid: user.uid\n            });\n            const response = await fetch(endpoint, {\n                method: 'DELETE',\n                headers: {\n                    'Authorization': \"Bearer \".concat(token),\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                console.error('Delete material failed:', errorData);\n                return false;\n            }\n            await fetchUserData(user);\n            return true;\n        } catch (error) {\n            console.error('Delete material error:', error);\n            return false;\n        }\n    };\n    return {\n        userData,\n        loading,\n        fetchUserData,\n        addMaterial,\n        updateProfile,\n        addTopic,\n        updateTopicName,\n        getContributionData,\n        completeMaterial,\n        uncompleteMaterial,\n        deleteMaterial\n    };\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NyYy9ob29rcy91c2VVc2VyRGF0YS50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQTRDO0FBRW1CO0FBRS9ELE1BQU1HLFVBQVU7QUFnQ1QsTUFBTUMsY0FBYztJQUN6QixNQUFNLEVBQUVDLElBQUksRUFBRSxHQUFHSCwyRUFBV0E7SUFDNUIsTUFBTSxDQUFDSSxVQUFVQyxZQUFZLEdBQUdQLCtDQUFRQSxDQUFjO0lBQ3RELE1BQU0sQ0FBQ1EsU0FBU0MsV0FBVyxHQUFHVCwrQ0FBUUEsQ0FBQztJQUN2QyxNQUFNLENBQUNVLFdBQVdDLGFBQWEsR0FBR1gsK0NBQVFBLENBQUM7SUFFM0MsTUFBTVksZ0JBQWdCLGVBQU9DO1lBQWtCQyxnRkFBZTtRQUM1RCxJQUFJSixXQUFXO1FBRWYsSUFBSTtZQUNGRCxXQUFXO1lBQ1gsTUFBTU0sWUFBWUMsWUFBWUMsR0FBRztZQUVqQyxpQkFBaUI7WUFDakIsSUFBSSxDQUFDSCxnQkFBZ0IsQ0FBQ0ksWUFBWTtnQkFDaENDLFFBQVFDLEdBQUcsQ0FBQztnQkFDWixNQUFNQyxXQUFXLFlBQTRCLE9BQWhCUixZQUFZUyxHQUFHO2dCQUM1QyxNQUFNQyxhQUFhQyxlQUFlQyxPQUFPLENBQUNKO2dCQUUxQyxJQUFJRSxZQUFZO29CQUNkLE1BQU0sRUFBRUcsSUFBSSxFQUFFQyxTQUFTLEVBQUUsR0FBR0MsS0FBS0MsS0FBSyxDQUFDTjtvQkFDdkMsTUFBTU8sTUFBTUMsS0FBS0MsS0FBSyxDQUFDLENBQUNDLEtBQUtoQixHQUFHLEtBQUtVLFNBQVEsSUFBSztvQkFDbERSLFFBQVFDLEdBQUcsQ0FBQywyQkFBK0IsT0FBSlUsS0FBSTtvQkFDM0N2QixZQUFZbUI7b0JBQ1o7Z0JBQ0Y7Z0JBQ0EsTUFBTSxJQUFJUSxNQUFNO1lBQ2xCO1lBRUEsTUFBTUMsUUFBUSxNQUFNdEIsWUFBWXVCLFVBQVU7WUFDMUMsTUFBTUMsV0FBVyxNQUFNQyxNQUFNLEdBQXdCekIsT0FBckJWLFNBQVEsZUFBNkIs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LEtBQUssQ0FBQywyQkFBMkJpQjtnQkFDekMsT0FBTztZQUNUO1lBRUEsTUFBTWxELGNBQWNxQztZQUNwQixPQUFPO1FBQ1QsRUFBRSxPQUFPSixPQUFPO1lBQ2QxQixRQUFRMEIsS0FBSyxDQUFDLDBCQUEwQkE7WUFDeEMsT0FBTztRQUNUO0lBQ0Y7SUFFQSxPQUFPO1FBQ0x2QztRQUNBRTtRQUNBSTtRQUNBc0M7UUFDQVc7UUFDQU87UUFDQUw7UUFDQU07UUFDQVk7UUFDQUc7UUFDQUM7SUFDRjtBQUNGLEVBQUUiLCJzb3VyY2VzIjpbIi9Vc2Vycy9qb3JkYW53dS9Eb2N1bWVudHMvR2l0SHViL3N0dWR5bGlzdC9jbGllbnQvc3JjL2hvb2tzL3VzZVVzZXJEYXRhLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBVc2VyIH0gZnJvbSAnLi4vdHlwZXMvVXNlcic7XG5pbXBvcnQgeyB1c2VGaXJlYmFzZSB9IGZyb20gJy4uL2FwcC9maXJlYmFzZS9GaXJlYmFzZVByb3ZpZGVyJztcblxuY29uc3QgQVBJX1VSTCA9ICdodHRwczovL3N0dWR5bGlzdC1zZXJ2ZXIub25yZW5kZXIuY29tJztcblxudHlwZSBNYXRlcmlhbFR5cGUgPSAnd2VicGFnZScgfCAnYm9vaycgfCAndmlkZW8nIHwgJ3BvZGNhc3QnO1xuXG5pbnRlcmZhY2UgTWF0ZXJpYWxQYXlsb2FkIHtcbiAgdHlwZTogTWF0ZXJpYWxUeXBlO1xuICB0aXRsZTogc3RyaW5nO1xuICB1cmw6IHN0cmluZyB8IG51bGw7XG4gIHJhdGluZzogbnVtYmVyO1xuICBkYXRlQWRkZWQ6IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIE1hdGVyaWFsSW5wdXQge1xuICB0eXBlOiBNYXRlcmlhbFR5cGU7XG4gIHRpdGxlOiBzdHJpbmc7XG4gIHVybD86IHN0cmluZztcbiAgcmF0aW5nPzogbnVtYmVyO1xuICBkYXRlQWRkZWQ/OiBEYXRlO1xufVxuXG5pbnRlcmZhY2UgTW9uZ29Db250cmlidXRpb24ge1xuICBkYXRlOiBzdHJpbmc7XG4gIGNvdW50OiBudW1iZXI7XG4gIHN0dWR5Q291bnQ/OiBudW1iZXI7ICAvLyDlvp4gTW9uZ29EQiDov5Tlm57nmoTlj6/og73mmK/lj6/pgbjnmoRcbn1cblxuaW50ZXJmYWNlIENvbnRyaWJ1dGlvbkRhdGEge1xuICBkYXRlOiBzdHJpbmc7XG4gIGNvdW50OiBudW1iZXI7XG4gIHN0dWR5Q291bnQ6IG51bWJlcjsgIC8vIOS9huaIkeWAkeeahOaHieeUqOS4remcgOimgeWug+aYr+W/hemcgOeahFxufVxuXG5leHBvcnQgY29uc3QgdXNlVXNlckRhdGEgPSAoKSA9PiB7XG4gIGNvbnN0IHsgYXV0aCB9ID0gdXNlRmlyZWJhc2UoKTtcbiAgY29uc3QgW3VzZXJEYXRhLCBzZXRVc2VyRGF0YV0gPSB1c2VTdGF0ZTxVc2VyIHwgbnVsbD4obnVsbCk7XG4gIGNvbnN0IFtsb2FkaW5nLCBzZXRMb2FkaW5nXSA9IHVzZVN0YXRlKHRydWUpO1xuICBjb25zdCBbaXNMb2FkaW5nLCBzZXRJc0xvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGZldGNoVXNlckRhdGEgPSBhc3luYyAoY3VycmVudFVzZXI6IGFueSwgZm9yY2VSZWZyZXNoID0gZmFsc2UpID0+IHtcbiAgICBpZiAoaXNMb2FkaW5nKSByZXR1cm47XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIHNldExvYWRpbmcodHJ1ZSk7XG4gICAgICBjb25zdCBzdGFydFRpbWUgPSBwZXJmb3JtYW5jZS5ub3coKTtcbiAgICAgIFxuICAgICAgLy8g5aaC5p6c5LiN5piv5by35Yi25Yi35paw77yM5omN5qqi5p+l5b+r5Y+WXG4gICAgICBpZiAoIWZvcmNlUmVmcmVzaCAmJiAhaXNPbmxpbmUoKSkge1xuICAgICAgICBjb25zb2xlLmxvZygnT2ZmbGluZSAtIHVzaW5nIGNhY2hlZCBkYXRhIGlmIGF2YWlsYWJsZScpO1xuICAgICAgICBjb25zdCBjYWNoZUtleSA9IGB1c2VyRGF0YV8ke2N1cnJlbnRVc2VyLnVpZH1gO1xuICAgICAgICBjb25zdCBjYWNoZWREYXRhID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShjYWNoZUtleSk7XG4gICAgICAgIFxuICAgICAgICBpZiAoY2FjaGVkRGF0YSkge1xuICAgICAgICAgIGNvbnN0IHsgZGF0YSwgdGltZXN0YW1wIH0gPSBKU09OLnBhcnNlKGNhY2hlZERhdGEpO1xuICAgICAgICAgIGNvbnN0IGFnZSA9IE1hdGgucm91bmQoKERhdGUubm93KCkgLSB0aW1lc3RhbXApIC8gMTAwMCk7XG4gICAgICAgICAgY29uc29sZS5sb2coYFVzaW5nIGNhY2hlZCBkYXRhLCBhZ2U6ICR7YWdlfSBzZWNvbmRzYCk7XG4gICAgICAgICAgc2V0VXNlckRhdGEoZGF0YSk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm8gY2FjaGVkIGRhdGEgYXZhaWxhYmxlIGFuZCBkZXZpY2UgaXMgb2ZmbGluZScpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IGN1cnJlbnRVc2VyLmdldElkVG9rZW4oKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYCR7QVBJX1VSTH0vYXBpL3VzZXJzLyR7Y3VycmVudFVzZXIudWlkfWAsIHtcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3Rva2VufWAsXG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEhUVFAgZXJyb3IhIHN0YXR1czogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBjb25zdCBjYWNoZUtleSA9IGB1c2VyRGF0YV8ke2N1cnJlbnRVc2VyLnVpZH1gO1xuICAgICAgXG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKGNhY2hlS2V5LCBKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgIGRhdGEsXG4gICAgICAgIHRpbWVzdGFtcDogRGF0ZS5ub3coKVxuICAgICAgfSkpO1xuICAgICAgXG4gICAgICBzZXRVc2VyRGF0YShkYXRhKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZmV0Y2hpbmcgdXNlciBkYXRhOicsIGVycm9yKTtcbiAgICAgIHNldFVzZXJEYXRhKG51bGwpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICB9XG4gIH07XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgaXNNb3VudGVkID0gdHJ1ZTtcbiAgICBcbiAgICBjb25zdCB1bnN1YnNjcmliZSA9IGF1dGgub25BdXRoU3RhdGVDaGFuZ2VkKCh1c2VyKSA9PiB7XG4gICAgICBpZiAodXNlciAmJiBpc01vdW50ZWQpIHtcbiAgICAgICAgZmV0Y2hVc2VyRGF0YSh1c2VyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNldFVzZXJEYXRhKG51bGwpO1xuICAgICAgICBzZXRMb2FkaW5nKGZhbHNlKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpc01vdW50ZWQgPSBmYWxzZTtcbiAgICAgIHVuc3Vic2NyaWJlKCk7XG4gICAgfTtcbiAgfSwgW2F1dGhdKTtcblxuICBjb25zdCBhZGRNYXRlcmlhbCA9IGFzeW5jIChtYXRlcmlhbERhdGE6IE1hdGVyaWFsSW5wdXQsIHRvcGljSWQ6IHN0cmluZykgPT4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB1c2VyID0gYXV0aC5jdXJyZW50VXNlcjtcbiAgICAgIGlmICghdXNlcikgdGhyb3cgbmV3IEVycm9yKCdObyB1c2VyIGxvZ2dlZCBpbicpO1xuXG4gICAgICBjb25zdCBlbmRwb2ludCA9IGAke0FQSV9VUkx9L2FwaS91c2Vycy8ke3VzZXIudWlkfS90b3BpY3MvJHt0b3BpY0lkfS9tYXRlcmlhbHNgO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZygnQWRkaW5nIG1hdGVyaWFsOicsIHtcbiAgICAgICAgcGF5bG9hZDogbWF0ZXJpYWxEYXRhLFxuICAgICAgICB0b3BpY0lkLFxuICAgICAgICB1cmw6IGVuZHBvaW50XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCB1c2VyLmdldElkVG9rZW4oKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZW5kcG9pbnQsIHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0b2tlbn1gLFxuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkobWF0ZXJpYWxEYXRhKVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgY29uc3QgZXJyb3JUZXh0ID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCdTZXJ2ZXIgZXJyb3IgcmVzcG9uc2U6JywgZXJyb3JUZXh0KTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gYWRkIG1hdGVyaWFsOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXBkYXRlZFVzZXIgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBzZXRVc2VyRGF0YSh1cGRhdGVkVXNlcik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgYWRkaW5nIG1hdGVyaWFsOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdXBkYXRlUHJvZmlsZSA9IGFzeW5jIChkYXRhOiB7IG5hbWU6IHN0cmluZzsgYmlvOiBzdHJpbmc7IHBob3RvVVJMPzogc3RyaW5nIH0pID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXNlciA9IGF1dGguY3VycmVudFVzZXI7XG4gICAgICBpZiAoIXVzZXIpIHRocm93IG5ldyBFcnJvcignTm8gdXNlciBsb2dnZWQgaW4nKTtcblxuICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCB1c2VyLmdldElkVG9rZW4oKTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coJ1VwZGF0aW5nIHByb2ZpbGUgd2l0aCBkYXRhOicsIGRhdGEpO1xuICAgICAgY29uc29sZS5sb2coJ1NlbmRpbmcgcmVxdWVzdCB0bzonLCBgJHtBUElfVVJMfS9hcGkvdXNlcnMvJHt1c2VyLnVpZH0vcHJvZmlsZWApO1xuICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICBgJHtBUElfVVJMfS9hcGkvdXNlcnMvJHt1c2VyLnVpZH0vcHJvZmlsZWAsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3Rva2VufWAsXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKVxuICAgICAgICB9XG4gICAgICApO1xuXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGNvbnN0IGVycm9yRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgcmVzcG9uc2U6JywgZXJyb3JEYXRhKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yRGF0YS5lcnJvciB8fCAnRmFpbGVkIHRvIHVwZGF0ZSBwcm9maWxlJyk7XG4gICAgICB9XG4gICAgICBcbiAgICAgIGNvbnN0IHVwZGF0ZWRVc2VyID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgY29uc29sZS5sb2coJ1VwZGF0ZWQgdXNlciBkYXRhOicsIHVwZGF0ZWRVc2VyKTtcbiAgICAgIHNldFVzZXJEYXRhKHVwZGF0ZWRVc2VyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyBwcm9maWxlOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgdXBkYXRlVG9waWNOYW1lID0gYXN5bmMgKHRvcGljSWQ6IHN0cmluZywgbmFtZTogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSBhdXRoLmN1cnJlbnRVc2VyO1xuICAgICAgaWYgKCF1c2VyKSB0aHJvdyBuZXcgRXJyb3IoJ05vIHVzZXIgbG9nZ2VkIGluJyk7XG5cbiAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgdXNlci5nZXRJZFRva2VuKCk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKCdVcGRhdGluZyB0b3BpYzonLCB7XG4gICAgICAgIHRvcGljSWQsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIHVybDogYCR7QVBJX1VSTH0vYXBpL3VzZXJzLyR7dXNlci51aWR9L3RvcGljcy8ke3RvcGljSWR9YFxuICAgICAgfSk7XG4gICAgICBcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICAgIGAke0FQSV9VUkx9L2FwaS91c2Vycy8ke3VzZXIudWlkfS90b3BpY3MvJHt0b3BpY0lkfWAsXG4gICAgICAgIHtcbiAgICAgICAgICBtZXRob2Q6ICdQVVQnLFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3Rva2VufWAsXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG5hbWUgfSlcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKTtcbiAgICAgICAgaWYgKGNvbnRlbnRUeXBlICYmIGNvbnRlbnRUeXBlLmluY2x1ZGVzKCdhcHBsaWNhdGlvbi9qc29uJykpIHtcbiAgICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yRGF0YS5lcnJvciB8fCAnRmFpbGVkIHRvIHVwZGF0ZSB0b3BpYyBuYW1lJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc3QgdGV4dCA9IGF3YWl0IHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmV4cGVjdGVkIHJlc3BvbnNlOicsIHRleHQpO1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgU2VydmVyIGVycm9yOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgXG4gICAgICBjb25zdCB1cGRhdGVkVXNlciA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgIHNldFVzZXJEYXRhKHVwZGF0ZWRVc2VyKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1cGRhdGluZyB0b3BpYyBuYW1lOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgYWRkVG9waWMgPSBhc3luYyAobmFtZTogc3RyaW5nKSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSBhdXRoLmN1cnJlbnRVc2VyO1xuICAgICAgaWYgKCF1c2VyKSB0aHJvdyBuZXcgRXJyb3IoJ05vIHVzZXIgbG9nZ2VkIGluJyk7XG5cbiAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgdXNlci5nZXRJZFRva2VuKCk7XG4gICAgICBcbiAgICAgIGNvbnNvbGUubG9nKCdTZW5kaW5nIHJlcXVlc3QgdG86JywgYCR7QVBJX1VSTH0vYXBpL3VzZXJzLyR7dXNlci51aWR9L3RvcGljc2ApO1xuICAgICAgXG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKFxuICAgICAgICBgJHtBUElfVVJMfS9hcGkvdXNlcnMvJHt1c2VyLnVpZH0vdG9waWNzYCxcbiAgICAgICAge1xuICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3Rva2VufWAsXG4gICAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgICAgfSxcbiAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh7IG5hbWUgfSlcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICBjb25zdCBjb250ZW50VHlwZSA9IHJlc3BvbnNlLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKTtcbiAgICAgICAgaWYgKGNvbnRlbnRUeXBlICYmIGNvbnRlbnRUeXBlLmluY2x1ZGVzKCdhcHBsaWNhdGlvbi9qc29uJykpIHtcbiAgICAgICAgICBjb25zdCBlcnJvckRhdGEgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yRGF0YS5lcnJvciB8fCAnRmFpbGVkIHRvIGFkZCB0b3BpYycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHRleHQgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgICAgICAgY29uc29sZS5lcnJvcignVW5leHBlY3RlZCByZXNwb25zZTonLCB0ZXh0KTtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFNlcnZlciBlcnJvcjogJHtyZXNwb25zZS5zdGF0dXN9YCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgY29uc3QgdXBkYXRlZFVzZXIgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBzZXRVc2VyRGF0YSh1cGRhdGVkVXNlcik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgYWRkaW5nIHRvcGljOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZ2V0Q29udHJpYnV0aW9uRGF0YSA9ICgpOiBDb250cmlidXRpb25EYXRhW10gPT4ge1xuICAgIGlmICghdXNlckRhdGE/LmNvbnRyaWJ1dGlvbnMpIHJldHVybiBbXTtcbiAgICBcbiAgICAvLyBTb3J0IGNvbnRyaWJ1dGlvbnMgYnkgZGF0ZVxuICAgIGNvbnN0IHNvcnRlZENvbnRyaWJ1dGlvbnMgPSBbLi4udXNlckRhdGEuY29udHJpYnV0aW9uc10uc29ydChcbiAgICAgIChhLCBiKSA9PiBuZXcgRGF0ZShhLmRhdGUpLmdldFRpbWUoKSAtIG5ldyBEYXRlKGIuZGF0ZSkuZ2V0VGltZSgpXG4gICAgKTtcbiAgICBcbiAgICByZXR1cm4gc29ydGVkQ29udHJpYnV0aW9ucy5tYXAoKGNvbnRyaWJ1dGlvbjogTW9uZ29Db250cmlidXRpb24pOiBDb250cmlidXRpb25EYXRhID0+ICh7XG4gICAgICBkYXRlOiBjb250cmlidXRpb24uZGF0ZSxcbiAgICAgIGNvdW50OiBjb250cmlidXRpb24uY291bnQsXG4gICAgICBzdHVkeUNvdW50OiBjb250cmlidXRpb24uc3R1ZHlDb3VudCB8fCAwICAvLyDnorrkv53mnIkgc3R1ZHlDb3VudFxuICAgIH0pKTtcbiAgfTtcblxuICBjb25zdCBjb21wbGV0ZU1hdGVyaWFsID0gYXN5bmMgKG1hdGVyaWFsSWQ6IHN0cmluZywgdG9waWNJZDogc3RyaW5nKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHVzZXIgPSBhdXRoLmN1cnJlbnRVc2VyO1xuICAgICAgaWYgKCF1c2VyKSB0aHJvdyBuZXcgRXJyb3IoJ05vIHVzZXIgbG9nZ2VkIGluJyk7XG4gIFxuICAgICAgY29uc3QgZW5kcG9pbnQgPSBgJHtBUElfVVJMfS9hcGkvdXNlcnMvJHt1c2VyLnVpZH0vdG9waWNzLyR7dG9waWNJZH0vbWF0ZXJpYWxzLyR7bWF0ZXJpYWxJZH0vY29tcGxldGVgO1xuICAgICAgXG4gICAgICBjb25zb2xlLmxvZygnU2VuZGluZyBjb21wbGV0ZSByZXF1ZXN0IHRvOicsIGVuZHBvaW50KTtcbiAgICAgIFxuICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCB1c2VyLmdldElkVG9rZW4oKTtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goZW5kcG9pbnQsIHtcbiAgICAgICAgbWV0aG9kOiAnUFVUJyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke3Rva2VufWAsXG4gICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJ1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGNvbnN0IGVycm9yRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignQ29tcGxldGUgbWF0ZXJpYWwgZXJyb3IgcmVzcG9uc2U6JywgZXJyb3JEYXRhKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGVycm9yRGF0YS5tZXNzYWdlIHx8IGVycm9yRGF0YS5lcnJvciB8fCAnRmFpbGVkIHRvIHVwZGF0ZSBtYXRlcmlhbCBjb21wbGV0aW9uIHN0YXR1cycpO1xuICAgICAgfVxuICBcbiAgICAgIGNvbnN0IHVwZGF0ZWRVc2VyID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgc2V0VXNlckRhdGEodXBkYXRlZFVzZXIpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBjb21wbGV0aW5nIG1hdGVyaWFsOicsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH1cbiAgfTtcblxuICBjb25zdCB1bmNvbXBsZXRlTWF0ZXJpYWwgPSBhc3luYyAobWF0ZXJpYWxJZDogc3RyaW5nLCB0b3BpY0lkOiBzdHJpbmcpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXNlciA9IGF1dGguY3VycmVudFVzZXI7XG4gICAgICBpZiAoIXVzZXIpIHRocm93IG5ldyBFcnJvcignTm8gdXNlciBsb2dnZWQgaW4nKTtcblxuICAgICAgY29uc3QgZW5kcG9pbnQgPSBgJHtBUElfVVJMfS9hcGkvdXNlcnMvJHt1c2VyLnVpZH0vdG9waWNzLyR7dG9waWNJZH0vbWF0ZXJpYWxzLyR7bWF0ZXJpYWxJZH0vdW5jb21wbGV0ZWA7XG4gICAgICBcbiAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgdXNlci5nZXRJZFRva2VuKCk7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKGVuZHBvaW50LCB7XG4gICAgICAgIG1ldGhvZDogJ1BVVCcsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAnQXV0aG9yaXphdGlvbic6IGBCZWFyZXIgJHt0b2tlbn1gLFxuICAgICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbidcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICAgICAgY29uc3QgZXJyb3JEYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3JEYXRhLm1lc3NhZ2UgfHwgJ0ZhaWxlZCB0byB1cGRhdGUgbWF0ZXJpYWwgY29tcGxldGlvbiBzdGF0dXMnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgdXBkYXRlZFVzZXIgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7XG4gICAgICBzZXRVc2VyRGF0YSh1cGRhdGVkVXNlcik7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVuY29tcGxldGluZyBtYXRlcmlhbDonLCBlcnJvcik7XG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgZGVsZXRlTWF0ZXJpYWwgPSBhc3luYyAobWF0ZXJpYWxJZDogc3RyaW5nLCB0b3BpY0lkOiBzdHJpbmcpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgdXNlciA9IGF1dGguY3VycmVudFVzZXI7XG4gICAgICBpZiAoIXVzZXIpIHRocm93IG5ldyBFcnJvcignTm8gdXNlciBsb2dnZWQgaW4nKTtcblxuICAgICAgY29uc3QgZW5kcG9pbnQgPSBgJHtBUElfVVJMfS9hcGkvdXNlcnMvJHt1c2VyLnVpZH0vdG9waWNzLyR7dG9waWNJZH0vbWF0ZXJpYWxzLyR7bWF0ZXJpYWxJZH1gO1xuICAgICAgY29uc3QgdG9rZW4gPSBhd2FpdCB1c2VyLmdldElkVG9rZW4oKTtcbiAgICAgIFxuICAgICAgY29uc29sZS5sb2coJ0RlbGV0ZSBtYXRlcmlhbCByZXF1ZXN0OicsIHtcbiAgICAgICAgZW5kcG9pbnQsXG4gICAgICAgIG1hdGVyaWFsSWQsXG4gICAgICAgIHRvcGljSWQsXG4gICAgICAgIHVzZXJVaWQ6IHVzZXIudWlkXG4gICAgICB9KTtcbiAgICAgIFxuICAgICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChlbmRwb2ludCwge1xuICAgICAgICBtZXRob2Q6ICdERUxFVEUnLFxuICAgICAgICBoZWFkZXJzOiB7XG4gICAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7dG9rZW59YCxcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgICAgIGNvbnN0IGVycm9yRGF0YSA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcbiAgICAgICAgY29uc29sZS5lcnJvcignRGVsZXRlIG1hdGVyaWFsIGZhaWxlZDonLCBlcnJvckRhdGEpO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIGF3YWl0IGZldGNoVXNlckRhdGEodXNlcik7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRGVsZXRlIG1hdGVyaWFsIGVycm9yOicsIGVycm9yKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHsgXG4gICAgdXNlckRhdGEsIFxuICAgIGxvYWRpbmcsIFxuICAgIGZldGNoVXNlckRhdGEsIFxuICAgIGFkZE1hdGVyaWFsLFxuICAgIHVwZGF0ZVByb2ZpbGUsXG4gICAgYWRkVG9waWMsXG4gICAgdXBkYXRlVG9waWNOYW1lLFxuICAgIGdldENvbnRyaWJ1dGlvbkRhdGEsXG4gICAgY29tcGxldGVNYXRlcmlhbCxcbiAgICB1bmNvbXBsZXRlTWF0ZXJpYWwsXG4gICAgZGVsZXRlTWF0ZXJpYWxcbiAgfTtcbn07Il0sIm5hbWVzIjpbInVzZVN0YXRlIiwidXNlRWZmZWN0IiwidXNlRmlyZWJhc2UiLCJBUElfVVJMIiwidXNlVXNlckRhdGEiLCJhdXRoIiwidXNlckRhdGEiLCJzZXRVc2VyRGF0YSIsImxvYWRpbmciLCJzZXRMb2FkaW5nIiwiaXNMb2FkaW5nIiwic2V0SXNMb2FkaW5nIiwiZmV0Y2hVc2VyRGF0YSIsImN1cnJlbnRVc2VyIiwiZm9yY2VSZWZyZXNoIiwic3RhcnRUaW1lIiwicGVyZm9ybWFuY2UiLCJub3ciLCJpc09ubGluZSIsImNvbnNvbGUiLCJsb2ciLCJjYWNoZUtleSIsInVpZCIsImNhY2hlZERhdGEiLCJzZXNzaW9uU3RvcmFnZSIsImdldEl0ZW0iLCJkYXRhIiwidGltZXN0YW1wIiwiSlNPTiIsInBhcnNlIiwiYWdlIiwiTWF0aCIsInJvdW5kIiwiRGF0ZSIsIkVycm9yIiwidG9rZW4iLCJnZXRJZFRva2VuIiwicmVzcG9uc2UiLCJmZXRjaCIsImhlYWRlcnMiLCJvayIsInN0YXR1cyIsImpzb24iLCJzZXRJdGVtIiwic3RyaW5naWZ5IiwiZXJyb3IiLCJpc01vdW50ZWQiLCJ1bnN1YnNjcmliZSIsIm9uQXV0aFN0YXRlQ2hhbmdlZCIsInVzZXIiLCJhZGRNYXRlcmlhbCIsIm1hdGVyaWFsRGF0YSIsInRvcGljSWQiLCJlbmRwb2ludCIsInBheWxvYWQiLCJ1cmwiLCJtZXRob2QiLCJib2R5IiwiZXJyb3JUZXh0IiwidGV4dCIsInVwZGF0ZWRVc2VyIiwidXBkYXRlUHJvZmlsZSIsImVycm9yRGF0YSIsInVwZGF0ZVRvcGljTmFtZSIsIm5hbWUiLCJjb250ZW50VHlwZSIsImdldCIsImluY2x1ZGVzIiwiYWRkVG9waWMiLCJnZXRDb250cmlidXRpb25EYXRhIiwiY29udHJpYnV0aW9ucyIsInNvcnRlZENvbnRyaWJ1dGlvbnMiLCJzb3J0IiwiYSIsImIiLCJkYXRlIiwiZ2V0VGltZSIsIm1hcCIsImNvbnRyaWJ1dGlvbiIsImNvdW50Iiwic3R1ZHlDb3VudCIsImNvbXBsZXRlTWF0ZXJpYWwiLCJtYXRlcmlhbElkIiwibWVzc2FnZSIsInVuY29tcGxldGVNYXRlcmlhbCIsImRlbGV0ZU1hdGVyaWFsIiwidXNlclVpZCJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/hooks/useUserData.ts\n"));

/***/ })

});